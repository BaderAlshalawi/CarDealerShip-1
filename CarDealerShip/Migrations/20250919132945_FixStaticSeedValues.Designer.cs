// <auto-generated />
using System;
using CarDealerShip.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarDealerShip.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250919132945_FixStaticSeedValues")]
    partial class FixStaticSeedValues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarDealerShip.Models.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "4574785d-904d-48af-9740-5f23585faaf5",
                            Email = "admin@local",
                            PasswordHash = "Admin#12345",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("CarDealerShip.Models.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d884b695-b973-405b-9299-b0b3450405ae"),
                            IsAvailable = true,
                            Make = "Honda",
                            Model = "Accord",
                            Price = 25000m,
                            Year = 2022
                        },
                        new
                        {
                            Id = new Guid("d914343b-5c88-417e-8112-0dc9e2beea31"),
                            IsAvailable = true,
                            Make = "Toyota",
                            Model = "Corolla",
                            Price = 15000m,
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("bd27a697-f06e-4cda-a0ec-8bc675cbf07c"),
                            IsAvailable = true,
                            Make = "Toyota",
                            Model = "Camry",
                            Price = 20000m,
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("d151cfdd-51b7-4715-a45a-4070837e6142"),
                            IsAvailable = true,
                            Make = "Ford",
                            Model = "Focus",
                            Price = 12000m,
                            Year = 2018
                        },
                        new
                        {
                            Id = new Guid("7cae4529-4bed-47fa-80f3-b49e8970991e"),
                            IsAvailable = true,
                            Make = "Ford",
                            Model = "Mustang",
                            Price = 30000m,
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("5c2d89fd-0e76-4e30-91ee-6c41988c0c9d"),
                            IsAvailable = true,
                            Make = "Chevrolet",
                            Model = "Malibu",
                            Price = 16000m,
                            Year = 2019
                        },
                        new
                        {
                            Id = new Guid("30dac83d-022f-42a1-adec-04df1db61848"),
                            IsAvailable = true,
                            Make = "BMW",
                            Model = "3 Series",
                            Price = 35000m,
                            Year = 2022
                        },
                        new
                        {
                            Id = new Guid("f52880fb-a538-4a2b-816f-eebd59b0ac12"),
                            IsAvailable = true,
                            Make = "Mercedes",
                            Model = "C-Class",
                            Price = 40000m,
                            Year = 2022
                        },
                        new
                        {
                            Id = new Guid("bba7ccb4-871f-4b79-8f87-cfd1b6e4fc4a"),
                            IsAvailable = true,
                            Make = "Honda",
                            Model = "Civic",
                            Price = 14000m,
                            Year = 2019
                        },
                        new
                        {
                            Id = new Guid("a23bd5b3-2981-4ce5-a97d-616c91dc0c02"),
                            IsAvailable = true,
                            Make = "Nissan",
                            Model = "Altima",
                            Price = 18000m,
                            Year = 2020
                        });
                });

            modelBuilder.Entity("Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PurchaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Purchase", b =>
                {
                    b.HasOne("CarDealerShip.Models.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealerShip.Models.Entities.AppUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
